tosca_definitions_version: cloudify_dsl_1_3

########################################################

imports:
  - http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.4.10/plugin.yaml
  - application-blueprint.yaml
  - types/aws.yaml
  - types/policy.yaml
  - types/cloud_config/cloud-config.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: m3.large

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

node_templates:

  a_node:
    type: cloudify.nodes.Compute
    properties:
      install_agent: false

  policy_node:
    type: policy_node_type
    relationships:
      - target: bono_vm
        type: cloudify.relationships.depends_on
      - target: sprout_vm
        type: cloudify.relationships.depends_on
      - target: a_node
        type: cloudify.relationships.contained_in
    properties:
       nodes_to_monitor:
          - ellis_vm
          - bono_vm
          - sprout_vm
          - homestead_vm
          - homer_vm
          - ralf_vm
          - bind_host

  all_nodes_external:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: all_nodes_external
      aws_config: *aws_config
      description: All Clearwater Nodes External
      rules:
        - ip_protocol: icmp
          from_port: -1
          to_port: -1
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  all_nodes_internal:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: All Clearwater Nodes Internal
      rules:
        - ip_protocol: tcp
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 161
          to_port: 162
          src_group_id: { get_property: [all_nodes_external, resource_id] }
        - ip_protocol: tcp
          from_port: 2380
          to_port: 2380
          src_group_id: { get_property: [all_nodes_external, resource_id] }
        - ip_protocol: tcp
          from_port: 4000
          to_port: 4000
          src_group_id: { get_property: [all_nodes_external, resource_id] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: all_nodes_external
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  ellis_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: ellis_vm_security_group
      aws_config: *aws_config
      description: Ellis VM Security Group
      rules:
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 80
          to_port: 80
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 443
          to_port: 443
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  bono_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: bono_vm_security_group
      aws_config: *aws_config
      description: Bono VM Security Group
      rules:
        - ip_protocol: tcp
          from_port: 3478
          to_port: 3478
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 3478
          to_port: 3478
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 5060
          to_port: 5060
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 5060
          to_port: 5060
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 5062
          to_port: 5062
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 32768
          to_port: 65535
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  bono_to_others_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Bono to Others VM Security Group
      rules:
        - ip_protocol: tcp
          src_group_id: { get_property: [bono_vm_security_group, resource_id] }
          from_port: 5058
          to_port: 5058
        - ip_protocol: udp
          src_group_id: { get_property: [sprout_vm_security_group, resource_id] }
          from_port: 5058
          to_port: 5058
    relationships:
      - type: cloudify.relationships.depends_on
        target: bono_vm_security_group
      - type: cloudify.relationships.depends_on
        target: sprout_vm_security_group
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  sprout_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: sprout_vm_security_group
      aws_config: *aws_config
      description: Sprout VM Security Group
      rules:
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 443
          to_port: 443
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  sprout_to_others_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Sprout to Others VM Security Group
      rules:
        - ip_protocol: tcp
          src_group_id: { get_property: [bono_vm_security_group, resource_id] }
          from_port: 5052
          to_port: 5052
        - ip_protocol: tcp
          src_group_id: { get_property: [bono_vm_security_group, resource_id] }
          from_port: 5054
          to_port: 5054
        - ip_protocol: tcp
          src_group_id: { get_property: [sprout_vm_security_group, resource_id] }
          from_port: 7000
          to_port: 7000
        - ip_protocol: tcp
          src_group_id: { get_property: [sprout_vm_security_group, resource_id] }
          from_port: 7253
          to_port: 7253
        - ip_protocol: tcp
          src_group_id: { get_property: [sprout_vm_security_group, resource_id] }
          from_port: 9160
          to_port: 9160
        - ip_protocol: tcp
          src_group_id: { get_property: [sprout_vm_security_group, resource_id] }
          from_port: 11211
          to_port: 11211
        - ip_protocol: tcp
          src_group_id: { get_property: [homestead_vm_security_group, resource_id] }
          from_port: 9888
          to_port: 9888
    relationships:
      - type: cloudify.relationships.depends_on
        target: bono_vm_security_group
      - type: cloudify.relationships.depends_on
        target: sprout_vm_security_group
      - type: cloudify.relationships.depends_on
        target: homestead_vm_security_group
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  homestead_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: homestead_vm_security_group
      aws_config: *aws_config
      description: Homestead VM Security Group
      rules:
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 0
          to_port: 65535
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  homestead_to_others_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Homestead to Others VM Security Groupbono_vm_security_group
      rules:
        - ip_protocol: udp
          src_group_id: { get_property: [homestead_vm_security_group, resource_id] }
          from_port: 7000
          to_port: 7000
        - ip_protocol: tcp
          src_group_id: { get_property: [sprout_vm_security_group, resource_id] }
          from_port: 8888
          to_port: 8888
        - ip_protocol: udp
          src_group_id: { get_property: [ellis_vm_security_group, resource_id] }
          from_port: 8888
          to_port: 8888
        - ip_protocol: tcp
          src_group_id: { get_property: [ellis_vm_security_group, resource_id] }
          from_port: 8889
          to_port: 8889
    relationships:
      - type: cloudify.relationships.depends_on
        target: sprout_vm_security_group
      - type: cloudify.relationships.depends_on
        target: ellis_vm_security_group
      - type: cloudify.relationships.depends_on
        target: homestead_vm_security_group
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  homer_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: homer_vm_security_group
      aws_config: *aws_config
      description: Homer VM Security Group
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  homer_to_others_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Homer to Others VM Security Group
      rules:
        - ip_protocol: tcp
          src_group_id: { get_property: [homer_vm_security_group, resource_id] }
          from_port: 7000
          to_port: 7000
        - ip_protocol: tcp
          src_group_id: { get_property: [sprout_vm_security_group, resource_id] }
          from_port: 7888
          to_port: 7888
        - ip_protocol: udp
          src_group_id: { get_property: [ellis_vm_security_group, resource_id] }
          from_port: 7888
          to_port: 7888
    relationships:
      - type: cloudify.relationships.depends_on
        target: sprout_vm_security_group
      - type: cloudify.relationships.depends_on
        target: ellis_vm_security_group
      - type: cloudify.relationships.depends_on
        target: homer_vm_security_group
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  ralf_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: ralf_vm_security_group
      aws_config: *aws_config
      description: Ralf VM Security Group
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  ralf_to_others_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Ralf to Others VM Security Group
      rules:
        - ip_protocol: tcp
          src_group_id: { get_property: [ralf_vm_security_group, resource_id] }
          from_port: 7253
          to_port: 7253
        - ip_protocol: tcp
          src_group_id: { get_property: [sprout_vm_security_group, resource_id] }
          from_port: 10888
          to_port: 10888
        - ip_protocol: udp
          src_group_id: { get_property: [bono_vm_security_group, resource_id] }
          from_port: 10888
          to_port: 10888
        - ip_protocol: tcp
          src_group_id: { get_property: [ralf_vm_security_group, resource_id] }
          from_port: 11211
          to_port: 11211
    relationships:
      - type: cloudify.relationships.depends_on
        target: sprout_vm_security_group
      - type: cloudify.relationships.depends_on
        target: bono_vm_security_group
      - type: cloudify.relationships.depends_on
        target: ralf_vm_security_group
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  bind_host_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: DNS VM Security Group
      rules:
        - cidr_ip: 0.0.0.0/0
          from_port: 53
          to_port: 53
          ip_protocol: udp
        - cidr_ip: 0.0.0.0/0
          from_port: 53
          to_port: 53
          ip_protocol: tcp
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  bono_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  ellis_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  ellis_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
      parameters:
        placement: { get_property: [ public_subnet, availability_zone ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: ellis_ip
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ellis_vm_security_group
      - target: public_subnet
        type: cloudify.aws.relationships.instance_contained_in_subnet

  bono_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
      parameters:
        placement: { get_property: [ public_subnet, availability_zone ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: bono_ip
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: bono_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: bono_to_others_security_group
      - target: public_subnet
        type: cloudify.aws.relationships.instance_contained_in_subnet

  sprout_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: sprout_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: sprout_to_others_security_group
      - target: private_subnet
        type: cloudify.aws.relationships.instance_contained_in_subnet

  homestead_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: homestead_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: homestead_to_others_security_group
      - target: private_subnet
        type: cloudify.aws.relationships.instance_contained_in_subnet

  homer_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: homer_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: homer_to_others_security_group
      - target: private_subnet
        type: cloudify.aws.relationships.instance_contained_in_subnet

  ralf_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ralf_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ralf_to_others_security_group
      - target: private_subnet
        type: cloudify.aws.relationships.instance_contained_in_subnet

  bind_host:
    type: clearwater.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: bind_host_security_group
      - target: private_subnet
        type: cloudify.aws.relationships.instance_contained_in_subnet


  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  private_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: private_subnet_id }
      cidr_block:  N/A
      availability_zone:  N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: vpc_id }
      cidr_block: N/A
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudConfig
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            cloud_config:
              users:
              - name: { get_input: agent_user }
                groups: sudo
                shell: /bin/bash
                sudo: ['ALL=(ALL) NOPASSWD:ALL']
                ssh-authorized-keys:
                - { get_secret: agent_key_public }

########################################################

  bono:
    type: clearwater.nodes.bono
    properties:
      private_domain: { get_input: private_domain }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            public_ip: { get_attribute: [ bono_ip, aws_resource_id ] }
    relationships:
        - type: monitors_bono_nodes
          target: bono_vm
        - type: app_connected_to_bind
          target: bind
          target_interfaces:
            cloudify.interfaces.relationship_lifecycle:
              establish:
                inputs:
                  public_ip: { get_attribute: [ bono_ip, aws_resource_id ] }


  ellis:
    type: clearwater.nodes.ellis
    properties:
      private_domain: { get_input: private_domain }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            public_ip: { get_attribute: [ellis_ip, aws_resource_id] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ellis_vm
      - type: app_connected_to_bind_ellis
        target: bind
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            establish:
              inputs:
                public_ip: { get_attribute: [ ellis_ip, aws_resource_id ] }

  ralf:
    type: clearwater.nodes.ralf
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: monitors_ralf_nodes
        target: ralf_vm
      - type: app_connected_to_bind
        target: bind

  homestead:
    type: clearwater.nodes.homestead
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: monitors_homestead_nodes
        target: homestead_vm
      - type: app_connected_to_bind
        target: bind

  homer:
    type: clearwater.nodes.homer
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: cloudify.relationships.contained_in
        target: homer_vm
      - type: app_connected_to_bind
        target: bind

  sprout:
    type: clearwater.nodes.sprout
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: monitors_sprout_nodes
        target: sprout_vm
      - type: app_connected_to_bind
        target: bind

  bind:
    type: clearwater.infra.bind
    properties:
      private_domain: { get_input: private_domain }
      public_domain: { get_input: public_domain }
      secret_code: secret
    relationships:
      - type: cloudify.relationships.contained_in
        target: bind_host

########################################################

outputs:

  web:
    description: Web application endpoint
    value:
      ip_ellis: { get_attribute: [ ellis_ip, aws_resource_id ] }
      ip_bono: { get_attribute: [ bono_ip, aws_resource_id ] }
      signup_code: secret

  stress_test:
    description: Information needed to install stress test
    value:
      ip_homer: { get_attribute: [ homer_vm, ip ] }
      ip_homestead: { get_attribute: [ homestead_vm, ip ] }
      ip_bono: { get_attribute: [ bono_vm, ip ] }
