tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/tosca-vcloud-plugin/1.4/plugin.yaml
  - types/vcloud.yaml
  - types/policy.yaml
  - application-blueprint.yaml

inputs:
# vCloud section

  vcloud_username:
    type: string

  vcloud_password:
    type: string
    default: ''

  vcloud_token:
    type: string
    default: ''

  vcloud_url:
    type: string

  vcloud_service:
    type: string

  vcloud_service_type:
    type: string
    default: 'subscription'

  vcloud_instance:
    type: string
    default: ''

  vcloud_api_version:
    type: string
    default: '5.5'

  vcloud_org_url:
    type: string
    default: ''

  vcloud_org:
    type: string

  vcloud_vdc:
    type: string

  catalog:
    type: string
    default: Public Catalog

  ssl_verify:
    type: boolean
    default: false
    description: >
      ssl check for connections to private services
      (disable self-signed certificates)

  edge_gateway:
    type: string

# Server section

  template:
    type: string
    description: should be Ubuntu Server 14.04 LTS (amd64)

  server_cpu:
    type: string
    default: 1

  server_memory:
    type: string
    default: 1024

# Agent section:

  user:
    type: string

  public_key:
    type: string

  private_keypath:
    type: string

# Network section

  network_public_nat_use_existing:
    type: boolean

  network_use_existing:
    type: boolean
    default: false

  network_name:
    type: string

  network_static_ip_range:
    type: string
    default: 10.67.90.129-10.67.90.254

  network_mask:
    type: string
    default: 255.255.255.0

  network_gateway_ip:
    type: string
    default: 10.67.90.1

  network_dns:
    default:
      - 10.67.90.1
      # - 8.8.8.8

  network_dhcp_range:
    type: string
    default: 10.67.90.2-10.67.90.128

  #######################################################

  # clearwater_public_ip:
  #   type: string
  #
  # #######################################################
  #
  # bono_public_ip:
  #   type: string
  #
  # #######################################################
  #
  # ellis_public_ip:
  #   type: string

########################################################

node_templates:

########################################################
# CREDENTIALS
########################################################

  vcloud_configuration:
   type: vcloud_configuration
   properties:
     vcloud_config:
       username: { get_input: vcloud_username }
       password: { get_input: vcloud_password }
       token: { get_input: vcloud_token }
       url: { get_input: vcloud_url }
       instance: { get_input: vcloud_instance }
       vdc: { get_input: vcloud_vdc }
       org: { get_input: vcloud_org }
       service_type: { get_input: vcloud_service_type }
       service: { get_input: vcloud_service }
       api_version: { get_input: vcloud_api_version }
       org_url: { get_input: vcloud_org_url }
       edge_gateway: { get_input: edge_gateway }
       ssl_verify: { get_input: ssl_verify }

########################################################
# SSH
########################################################

  common_ssh_keypair:
    type: cloudify.vcloud.nodes.KeyPair
    properties:
      public_key:
        user: { get_input: user }
        key: { get_input: public_key }
      private_key:
        path: { get_input: private_keypath }

########################################################
# FIREWALL (SECURITY GROUPS) CONFIGURATION
########################################################

  node_security_group:
    type: cloudify.vcloud.nodes.SecurityGroup
    properties:
      security_group:
        name: nodevcloud_security_group
        edge_gateway: { get_input: edge_gateway }
      rules:
        - source: any
          destination: any
          action: allow
          protocol: any
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

########################################################
# CLEARWATER NETWORK CONFIGURATION
########################################################

  clearwater_network:
    type: cloudify.vcloud.nodes.Network
    properties:
      use_external_resource: { get_input: network_use_existing }
      resource_id: { get_input: network_name }
      network:
        name: { get_input: network_name }
        edge_gateway: { get_input: edge_gateway }
        static_range: { get_input: network_static_ip_range }
        netmask: { get_input: network_mask }
        gateway_ip: { get_input: network_gateway_ip }
        dns: { get_input: network_dns }
        dhcp:
          dhcp_range: { get_input: network_dhcp_range }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    relationships:
        - target: network_snat
          type: cloudify.vcloud.net_connected_to_public_nat

########################################################
# NETWORK SNAT CONFIGURATION
########################################################

  network_snat:
    type: cloudify.vcloud.nodes.PublicNAT
    properties:
      use_external_resource: { get_input: network_public_nat_use_existing }
      nat:
        edge_gateway: { get_input: edge_gateway }
      rules:
        - type: SNAT
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }


########################################################
# BONO VM NAT CONFIGURATION
########################################################

  bono_vm_nat:
    type: cloudify.vcloud.nodes.PublicNAT
    properties:
      nat:
        edge_gateway: { get_input: edge_gateway }
      rules:
        - type: DNAT
          protocol: tcp
          original_port: 5060
          translated_port: 5060
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

########################################################
# ELLIS VM NAT CONFIGURATION
########################################################

  ellis_vm_nat:
    type: cloudify.vcloud.nodes.PublicNAT
    properties:
      nat:
        edge_gateway: { get_input: edge_gateway }
      rules:
        - type: DNAT
          protocol: tcp
          original_port: 80
          translated_port: 80
        - type: DNAT
          protocol: tcp
          original_port: 8088
          translated_port: 8088
        - type: DNAT
          protocol: tcp
          original_port: 53
          translated_port: 53
        - type: DNAT
          protocol: tcp
          original_port: 8888
          translated_port: 8888
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

########################################################
# Policy
########################################################
  policy_node:
    type: policy_node_type
    properties:
      nodes_to_monitor:
        - ellis_vm
        - bono_vm
        - sprout_vm
        - homestead_vm
        - homer_vm
        - ralf_vm
        - bind_host
    relationships:
      - type: cloudify.relationships.depends_on
        target: ellis_vm
      - type: cloudify.relationships.depends_on
        target: bono_vm
      - type: cloudify.relationships.depends_on
        target: sprout_vm
      - type: cloudify.relationships.depends_on
        target: homestead_vm
      - type: cloudify.relationships.depends_on
        target: homer_vm
      - type: cloudify.relationships.depends_on
        target: ralf_vm
      - type: cloudify.relationships.depends_on
        target: bind_host

########################################################
# BONO VM CONFIGURATION
########################################################

  bono_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      server:
        catalog: { get_input: catalog }
        template: { get_input: template }
        guest_customization:
          public_keys:
            - { get_property: [common_ssh_keypair, public_key] }
        hardware:
          cpu: { get_input: server_cpu }
          memory: { get_input: server_memory }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            management_network: { get_attribute: [ clearwater_network, vcloud_network_name ] }
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
              CPUCollector: {}
    relationships:
      - target: common_ssh_keypair
        type: cloudify.vcloud.server_connected_to_keypair
      - target: bono_vm_nat
        type: cloudify.vcloud.server_connected_to_public_nat
      - target: node_security_group
        type: cloudify.vcloud.server_connected_to_security_group
      - target: clearwater_network
        type: cloudify.vcloud.server_connected_to_network

########################################################
# ELLIS VM CONFIGURATION
########################################################

  ellis_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      server:
        catalog: { get_input: catalog }
        template: { get_input: template }
        guest_customization:
          public_keys:
            - { get_property: [common_ssh_keypair, public_key] }
        hardware:
          cpu: { get_input: server_cpu }
          memory: { get_input: server_memory }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            management_network: { get_attribute: [ clearwater_network, vcloud_network_name ] }
    relationships:
      - target: common_ssh_keypair
        type: cloudify.vcloud.server_connected_to_keypair
      - target: ellis_vm_nat
        type: cloudify.vcloud.server_connected_to_public_nat
      - target: node_security_group
        type: cloudify.vcloud.server_connected_to_security_group
      - target: clearwater_network
        type: cloudify.vcloud.server_connected_to_network

########################################################
# SPROUT VM CONFIGURATION
########################################################

  sprout_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      server:
        catalog: { get_input: catalog }
        template: { get_input: template }
        guest_customization:
          public_keys:
            - { get_property: [common_ssh_keypair, public_key] }
          hardware:
            cpu: { get_input: server_cpu }
            memory: { get_input: server_memory }
        management_network: { get_attribute: [ clearwater_network, vcloud_network_name ] }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            management_network: { get_attribute: [ clearwater_network, vcloud_network_name ] }
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
              CPUCollector: {}
    relationships:
      - target: common_ssh_keypair
        type: cloudify.vcloud.server_connected_to_keypair
      - target: node_security_group
        type: cloudify.vcloud.server_connected_to_security_group
      - target: clearwater_network
        type: cloudify.vcloud.server_connected_to_network

########################################################
# HOMER VM CONFIGURATION
########################################################

  homer_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      server:
        catalog: { get_input: catalog }
        template: { get_input: template }
        guest_customization:
          public_keys:
            - { get_property: [common_ssh_keypair, public_key] }
          hardware:
            cpu: { get_input: server_cpu }
            memory: { get_input: server_memory }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            management_network: { get_attribute: [ clearwater_network, vcloud_network_name ] }
    relationships:
      - target: common_ssh_keypair
        type: cloudify.vcloud.server_connected_to_keypair
      - target: node_security_group
        type: cloudify.vcloud.server_connected_to_security_group
      - target: clearwater_network
        type: cloudify.vcloud.server_connected_to_network

########################################################
# HOMESTEAD VM CONFIGURATION
########################################################

  homestead_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      server:
        catalog: { get_input: catalog }
        template: { get_input: template }
        guest_customization:
          public_keys:
            - { get_property: [common_ssh_keypair, public_key] }
          hardware:
            cpu: { get_input: server_cpu }
            memory: { get_input: server_memory }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            management_network: { get_attribute: [ clearwater_network, vcloud_network_name ] }
    relationships:
      - target: common_ssh_keypair
        type: cloudify.vcloud.server_connected_to_keypair
      - target: node_security_group
        type: cloudify.vcloud.server_connected_to_security_group
      - target: clearwater_network
        type: cloudify.vcloud.server_connected_to_network

########################################################
# RALF VM CONFIGURATION
########################################################

  ralf_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      server:
        catalog: { get_input: catalog }
        template: { get_input: template }
        guest_customization:
          public_keys:
            - { get_property: [common_ssh_keypair, public_key] }
          hardware:
            cpu: { get_input: server_cpu }
            memory: { get_input: server_memory }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            management_network: { get_attribute: [ clearwater_network, vcloud_network_name ] }
    relationships:
      - target: common_ssh_keypair
        type: cloudify.vcloud.server_connected_to_keypair
      - target: node_security_group
        type: cloudify.vcloud.server_connected_to_security_group
      - target: clearwater_network
        type: cloudify.vcloud.server_connected_to_network

########################################################
# DNS VM CONFIGURATION
########################################################

  bind_host:
    type: clearwater.nodes.MonitoredServer
    properties:
      server:
        catalog: { get_input: catalog }
        template: { get_input: template }
        guest_customization:
          public_keys:
            - { get_property: [common_ssh_keypair, public_key] }
          hardware:
            cpu: { get_input: server_cpu }
            memory: { get_input: server_memory }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            management_network: { get_attribute: [ clearwater_network, vcloud_network_name ] }
    relationships:
      - target: common_ssh_keypair
        type: cloudify.vcloud.server_connected_to_keypair
      - target: node_security_group
        type: cloudify.vcloud.server_connected_to_security_group
      - target: clearwater_network
        type: cloudify.vcloud.server_connected_to_network

# SoftwareComponents section

  bono:
    type: clearwater.nodes.bono
    properties:
      private_domain: { get_input: private_domain }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            public_ip: { get_attribute: [ bono_vm_nat, public_ip ] }
    relationships:
      - type: monitors_bono_nodes
        target: bono_vm
      - type: app_connected_to_bind
        target: bind
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            establish:
              inputs:
                public_ip: { get_attribute: [ bono_vm_nat, public_ip ] }

  ellis:
    type: clearwater.nodes.ellis
    properties:
      private_domain: { get_input: private_domain }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            public_ip: { get_attribute: [ ellis_vm_nat, public_ip ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ellis_vm
      - type: app_connected_to_bind_ellis
        target: bind
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            establish:
              inputs:
                public_ip: { get_attribute: [ ellis_vm_nat, public_ip ] }

  ralf:
    type: clearwater.nodes.ralf
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: monitors_ralf_nodes
        target: ralf_vm
      - type: app_connected_to_bind
        target: bind

  homestead:
    type: clearwater.nodes.homestead
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: monitors_homestead_nodes
        target: homestead_vm
      - type: app_connected_to_bind
        target: bind

  homer:
    type: clearwater.nodes.homer
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: cloudify.relationships.contained_in
        target: homer_vm
      - type: app_connected_to_bind
        target: bind

  sprout:
    type: clearwater.nodes.sprout
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: monitors_sprout_nodes
        target: sprout_vm
      - type: app_connected_to_bind
        target: bind

  bind:
    type: clearwater.infra.bind
    properties:
      private_domain: { get_input: private_domain }
      public_domain: { get_input: public_domain }
      secret_code: secret
    relationships:
      - type: cloudify.relationships.contained_in
        target: bind_host

########################################################

outputs:
  web:
    description: Web application endpoint
    value:
      ip_ellis: { get_attribute: [ ellis_vm_nat, public_ip ] }
      ip_bono: { get_attribute: [ bono_vm_nat, public_ip ] }
      signup_code: secret
  stress_test:
    description: Information needed to install stress test
    value:
      ip_homer: { get_attribute: [ homer_vm, ip ] }
      ip_homestead: { get_attribute: [ homestead_vm, ip ] }
      ip_bono: { get_attribute: [ bono_vm, ip ] }
